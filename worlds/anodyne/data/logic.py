from typing import Callable, List, NamedTuple, Optional, TYPE_CHECKING

from .predicates import *

if TYPE_CHECKING:
    from worlds.anodyne import AnodyneWorld


class AnodyneConnection(NamedTuple):
    from_region: str
    to_region: str
    rule: Optional[Callable[[CollectionState], bool]] = None


def get_logic(world: "AnodyneWorld") -> List[AnodyneConnection]:
    return [
        AnodyneConnection("Menu", "street"),
        AnodyneConnection("street", "overworld left"),
        AnodyneConnection("overworld left", "fields top", lambda state: state.has("Green Key", world.player)),
        AnodyneConnection("overworld left", "temple start"),
        AnodyneConnection("overworld left", "overworld card gate", lambda state: anodyne_has_cards(state, 4, world)),
        AnodyneConnection("temple start", "temple boss",
                          lambda state: anodyne_has_small_keys(state, "Temple of the Seeing One", 2, world)),
        AnodyneConnection("temple start", "temple card 4",
                          lambda state: anodyne_has_small_keys(state, "Temple of the Seeing One", 3, world)),
        AnodyneConnection("temple boss", "temple extra", lambda state: state.has("Temple of the Seeing One Statue",
                                                                                 world.player)),
        AnodyneConnection("temple extra", "overworld right",
                          lambda state: anodyne_has_small_keys(state, "Temple of the Seeing One", 3, world)),
        AnodyneConnection("overworld right", "young town"),
        AnodyneConnection("young town", "young town card gate", lambda state: anodyne_has_cards(state, 16, world)),
        AnodyneConnection("young town", "apartment 1f start", lambda state: state.has("Jump Shoes", world.player)),
        AnodyneConnection("apartment 1f start", "apartment 2f rat maze"),
        AnodyneConnection("apartment 1f start", "apartment 1f couches",
                          lambda state: anodyne_has_small_keys(state, "Apartment", 4, world)),
        AnodyneConnection("apartment 1f start", "apartment 3f start",
                          lambda state: anodyne_has_small_keys(state, "Apartment", 3, world)),
        AnodyneConnection("apartment 3f start", "apartment 3f boss",
                          lambda state: anodyne_has_small_keys(state, "Apartment", 4, world)),
        AnodyneConnection("fields top", "fields shopkeeper trade", lambda state: state.has("Cardboard Box",
                                                                                           world.player)),
        AnodyneConnection("fields top", "fields mitra trade", lambda state: state.has("Biking Shoes", world.player)),
        AnodyneConnection("fields top", "windmill", lambda state: all([
            state.has("Green Key", world.player),
            state.has("Blue Key", world.player),
            state.has("Red Key", world.player),
        ])),
        AnodyneConnection("fields top", "fields lake", lambda state: state.has("Jump Shoes", world.player)),
        AnodyneConnection("fields top", "deep forest"),
        AnodyneConnection("fields top", "terminal start", lambda state: all([
            state.has("Jump Shoes", world.player),
            state.has("Red Key", world.player),  # this isn't technically true because you can avoid the gate? hmm...
        ])),
        AnodyneConnection("deep forest", "cliffs left"),
        AnodyneConnection("cliffs left", "mountain extend", lambda state: state.has("Jump Shoes", world.player)),
        AnodyneConnection("cliffs left", "mountain 1f start"),
        AnodyneConnection("mountain 1f start", "mountain 1f jump", lambda state: state.has("Jump Shoes", world.player)),
        AnodyneConnection("mountain 1f jump", "mountain 1f ledge",
                          lambda state: anodyne_has_small_keys(state, "Mountain Cavern", 4, world)),
        AnodyneConnection("mountain 1f jump", "mountain 2f start",
                          lambda state: anodyne_has_small_keys(state, "Mountain Cavern", 2, world)),
        AnodyneConnection("mountain 2f start", "mountain 2f two keys",
                          lambda state: anodyne_has_small_keys(state, "Mountain Cavern", 4, world)),
        AnodyneConnection("mountain 2f start", "mountain b1f boss",
                          lambda state: anodyne_has_small_keys(state, "Mountain Cavern", 3, world)),
        AnodyneConnection("mountain b1f boss", "cliffs right", lambda state: state.has("Mountain Cavern Statue",
                                                                                       world.player)),
        AnodyneConnection("cliffs right", "space"),
        AnodyneConnection("space", "hotel 4f start", lambda state: state.has("Jump Shoes", world.player)),
        AnodyneConnection("hotel 4f start", "hotel 4f elevator",
                          lambda state: anodyne_has_small_keys(state, "Hotel", 1, world)),
        AnodyneConnection("hotel 4f elevator", "hotel 3f start"),
        AnodyneConnection("hotel 3f start", "hotel 3f blades",
                          lambda state: anodyne_has_small_keys(state, "Hotel", 6, world)),
        AnodyneConnection("hotel 3f start", "hotel 2f right",
                          lambda state: anodyne_has_small_keys(state, "Hotel", 6, world)),
        AnodyneConnection("hotel 3f start", "hotel 2f left",
                          lambda state: anodyne_has_small_keys(state, "Hotel", 4, world)),
        AnodyneConnection("hotel 2f left", "hotel 1f inner"),
        AnodyneConnection("hotel 1f inner", "hotel 1f boss",
                          lambda state: anodyne_has_small_keys(state, "Hotel", 6, world)),
        AnodyneConnection("fields top", "beach start"),
        AnodyneConnection("beach start", "beach card gate", lambda state: anodyne_has_cards(state, 8, world)),
        AnodyneConnection("beach start", "red sea"),
        AnodyneConnection("red sea", "grotto widen"),
        AnodyneConnection("red sea", "grotto middle"),
        AnodyneConnection("grotto middle", "grotto middle keyed",
                          lambda state: anodyne_has_small_keys(state, "Red Grotto", 6, world)),
        AnodyneConnection("red sea", "grotto left", lambda state: anodyne_has_red_grotto(state, 1, world)),
        AnodyneConnection("grotto left", "grotto left keyed",
                          lambda state: anodyne_has_small_keys(state, "Red Grotto", 6, world)),
        AnodyneConnection("red sea", "grotto right", lambda state: anodyne_has_red_grotto(state, 2, world)),
        AnodyneConnection("grotto right", "grotto right keyed",
                          lambda state: anodyne_has_small_keys(state, "Red Grotto", 6, world)),
        AnodyneConnection("red sea", "grotto top", lambda state: anodyne_has_red_grotto(state, 3, world)),
        AnodyneConnection("grotto top", "labyrinth", lambda state: state.has("Red Grotto Statue", world.player)),
        AnodyneConnection("labyrinth", "labyrinth chest", lambda state: state.has("Jump Shoes", world.player)),
        AnodyneConnection("labyrinth", "labyrinth card gate", lambda state: anodyne_has_cards(state, 24, world)),
        AnodyneConnection("labyrinth", "circus start", lambda state: state.has("Jump Shoes", world.player)),
        AnodyneConnection("circus start", "circus next",
                          lambda state: anodyne_has_small_keys(state, "Circus", 1, world)),
        AnodyneConnection("circus next", "circus third",
                          lambda state: anodyne_has_small_keys(state, "Circus", 2, world)),
        AnodyneConnection("circus third", "circus fourth",
                          lambda state: anodyne_has_small_keys(state, "Circus", 3, world)),
        AnodyneConnection("circus fourth", "circus double clowns",
                          lambda state: anodyne_has_small_keys(state, "Circus", 4, world)),
        AnodyneConnection("terminal start", "go start",
                          lambda state: anodyne_has_cards(state, world.options.endgame_card_requirement.value, world)),
        AnodyneConnection("go start", "briar", lambda state: state.has("Swap", world.player)),
    ]
